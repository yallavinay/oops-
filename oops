// Java oops class and objects 
 Ex 1 : 
public class Main {
  int x = 5;

  public static void main(String[] args) {
    Main myObj = new Main();
    System.out.println(myObj.x);
  }
} 

EX 2 :
 public class Main {
  int x = 5;

  public static void main(String[] args) {
    Main myObj1 = new Main();  // Object 1
    Main myObj2 = new Main();  // Object 2
    System.out.println(myObj1.x);
    System.out.println(myObj2.x);
  }
}
------------------------------------------------------
//oops in python 
class Main:
    def __init__(self):
        self.x = 5

# Main logic (similar to Java's main method)
if __name__ == "__main__":
    myObj = Main()
    print(myObj.x)
-----------------------------------------------------
Using Multiple Classes
You can also create an object of a class and access it in another class. This is often used for better organization of classes (one class has all the attributes and methods, while the other class holds the main() method (code to be executed)).

Remember that the name of the java file should match the class name. In this example, we have created two files in the same directory/folder:

Main.java
Second.java

public class Main {
  int x = 5;
}
Second.java
class Second {
  public static void main(String[] args) {
    Main myObj = new Main();
    System.out.println(myObj.x);
  }
}
When both files have been compiled:

C:\Users\Your Name>javac Main.java
C:\Users\Your Name>javac Second.java
Run the Second.java file:

C:\Users\Your Name>java Second
And the output will be:
5
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
for python : 

main.py

python

class Main:
    def __init__(self):
        self.x = 5
second.py

python

from main import Main

class Second:
    @staticmethod
    def main():
        myObj = Main()
        print(myObj.x)

if __name__ == "__main__":
    Second.main()
‚ñ∂Ô∏è Run it:
bash
python second.py
üñ®Ô∏è Output:
5
-------------------------------------------------------------------------------------------------------
Static vs. Public


JAVA :
public class Main {
  static void myStaticMethod() {
    System.out.println("Static methods can be called without creating objects");
  }

  public void myPublicMethod() {
    System.out.println("Public methods must be called by creating objects");
  }

  public static void main(String[] args) {
    myStaticMethod();          // static call
    // myPublicMethod();       // invalid

    Main myObj = new Main();
    myObj.myPublicMethod();    // valid
  }
}


PYTHON : 

class Main:
    @staticmethod
    def my_static_method():
        print("Static methods can be called without creating objects")

    def my_public_method(self):
        print("Public methods must be called by creating objects")

# Simulating Java's main method
if __name__ == "__main__":
    Main.my_static_method()  # Static method call without creating an object

    # Main.my_public_method()  # ‚ùå Would cause error in Python too

    myObj = Main()
    myObj.my_public_method()  # Instance method call
